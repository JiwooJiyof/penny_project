import os
from typing import Optional, List

from dotenv import load_dotenv
from supabase import create_client, Client
from dataclasses import dataclass

load_dotenv()

url: str = os.getenv("SUPABASE_URL")
key: str = os.getenv("SUPABASE_KEY")
supabase: Client = create_client(url, key)


@dataclass
class Product:
    name: str
    price: float
    unit_type: str
    store_name: str
    image_url: Optional[str] = None
    # brand: Optional[str] = None




def find_product_id(product: Product) -> Optional[int]:
    """
    Finds the product id of the product in the database. If the product does not exist, it will return None.
    """
    columns = (supabase.table('temp_products').select('id').
     eq('display_name', product.name).eq('seller_name', product.store_name).execute())
    print(columns)
    if len(columns.data) == 0:
        return None
    if len(columns.data) > 1:
        raise Exception("Multiple products with same name and store name")
    return columns.data[0]['id']


def add_products(products: List[Product]):
    """
    Adds products to the database. If the product already exists, it will update just update the price. Otherwise it
    will add the product to the database and then add the price.
    """
    for product in products:
        id = find_product_id(product)
        if id is None:
            supabase.table('temp_products').insert(
                {"display_name": product.name, "seller_name": product.store_name, "image_url": product.image_url}).execute()
        id = find_product_id(product)
        if id is not None:
            supabase.table('temp_prices').insert(
                {"product_id": id, "unit_price": product.price, "unit_system": product.unit_type}).execute()
        if id is None:
            raise Exception("Product not found")

def delete_all_products():
    """
    Deletes all products from temp_products and temp_prices. Really should only be used to test out the scraper.
    """
    supabase.table('temp_prices').delete().neq('unit_price', 10).execute()
    supabase.table('temp_products').delete().neq('display_name', "NULL").execute()

        # supabase.table('temp_products').insert(
        #     {"display_name": product.name, "unit_system": product.unit_type}).execute()


def update_product(new_name, uuid):
    supabase.table('products').update({'display_name': new_name}).eq(
        'id', uuid).execute()  # uuid is automatically generated by database


if __name__ == '__main__':
    import uuid
    # prod1 = Product('apple', "g")
    # prod2 = Product('milk', "mL")
    # product_list = [prod1, prod2]
    # add_products(product_list)
    delete_all_products()
    prod = [Product('apple', 1.0, "ml", "metro"), Product('milk', 1.0, "ml", "metro")]
    # add_products(prod)
    # update_product('apples', uuid.UUID("e64192f2-9620-40e2-8043-fb4227663e51"))
